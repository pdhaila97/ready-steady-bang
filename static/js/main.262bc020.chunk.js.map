{"version":3,"sources":["components/StyledButton.tsx","components/Home.tsx","components/Icon.tsx","utils/icon-enum.tsx","utils/clientMessages.tsx","services/client.ts","components/ClientMessage.tsx","components/ReadySteadyBang.tsx","services/calcs.ts","components/SinglePlayer.tsx","components/TwoPlayer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledButton","styled","Button","FirstPage","props","Box","height","display","justifyContent","alignItems","variant","color","onClick","handleClick","Typography","SecondPage","flexDirection","pb","py","Home","useState","showOptions","setShowOptions","mode","history","push","Icon","IconComponent","item","IconName","AirlineSeatReclineExtraIcon","KeyboardArrowLeft","KeyboardArrowRight","ThumbUpIcon","PanToolIcon","DonutLargeRoundedIcon","TimelineRoundedIcon","clientMessages","label","icon","fontSize","List","showClientMessage","JSON","parse","localStorage","getItem","value","StyledSwipeableViews","SwipeableViews","StyledMobileStepper","MobileStepper","StyledLink","Link","ClientMessage","theme","useTheme","React","activeStep","setActiveStep","maxSteps","length","handleBegin","setItem","stringify","go","px","axis","direction","index","onChangeIndex","step","enableMouseEvents","map","textAlign","pt","steps","position","nextButton","size","prevActiveStep","disabled","backButton","ReadySteadyBang","state","setState","defaultTimer","timer","randomTimerLimit","Math","random","setIsClickScoreable","useEffect","setTimeout","clearTimeout","minHeight","bgcolor","width","getAvgTime","numArray","reduce","aggregator","currentValue","SinglePlayerGame","isClickScoreable","setTimer","reactionTime","setReactionTime","illegalMove","setIllegalMove","reactionTimes","setReactionTimes","gameOver","setGameOver","Date","now","rTime","palette","grey","disableRipple","SinglePlayer","TwoPlayer","goBack","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.262bc020.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button/Button\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton = styled(Button)`\r\ntext-transform: none;\r\nwidth: 80%;\r\nmax-width: 300px;\r\nheight: 56px;\r\n`;\r\n\r\nexport default StyledButton;","import React, { useState } from \"react\";\r\nimport Box from '@material-ui/core/Box';\r\nimport { Typography } from \"@material-ui/core\";\r\nimport StyledButton from \"./StyledButton\";\r\ninterface IHomeProps {\r\n    [x: string] : any;\r\n}\r\n\r\n\r\nfunction Home (props: IHomeProps) {\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n\r\n    const handleClick = (mode: \"start\" | \"1P\" | \"2P\") => {\r\n        switch (mode) {\r\n            case \"start\":\r\n                setShowOptions(true);\r\n                break;\r\n\r\n            case \"1P\":\r\n                props.history.push(\"/1P\");\r\n                break;\r\n\r\n            case \"2P\":\r\n                props.history.push(\"/2P\");\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {!showOptions && <FirstPage handleClick={handleClick} />}\r\n        {showOptions && <SecondPage handleClick={handleClick} />}\r\n        </>\r\n    )\r\n} \r\n\r\nfunction FirstPage(props: {handleClick: (mode: any) => void}) {\r\n    return (\r\n        <Box height={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <StyledButton\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => props.handleClick(\"start\")}\r\n            >\r\n                <Typography variant=\"h6\">\r\n                    Let's Go!\r\n                </Typography>\r\n            </StyledButton>\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction SecondPage(props: {handleClick: (mode: any) => void}) {\r\n    return (\r\n        <Box height={1} display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Box pb={5}>\r\n                <Typography variant=\"h4\">\r\n                    Choose Mode: \r\n                </Typography>\r\n            </Box>\r\n            <StyledButton\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => props.handleClick(\"1P\")}\r\n            >\r\n            <Typography variant=\"h6\">\r\n                1 Player\r\n            </Typography>\r\n            </StyledButton>\r\n            <Box py={1}/>\r\n            <StyledButton\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => props.handleClick(\"2P\")}\r\n            >\r\n            <Typography variant=\"h6\">\r\n                2 Player\r\n            </Typography>\r\n            </StyledButton>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\n\r\ninterface IIconProps {\r\n    item: any;\r\n    fontSize?: string;\r\n    color?: string;\r\n}\r\nfunction Icon(props: IIconProps) {\r\n    const IconComponent = props.item;\r\n\r\n    return <IconComponent {...props}/>\r\n}\r\n\r\nexport default Icon;","import AirlineSeatReclineExtraIcon from '@material-ui/icons/AirlineSeatReclineExtra';\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport PanToolIcon from '@material-ui/icons/PanTool';\r\nimport DonutLargeRoundedIcon from '@material-ui/icons/DonutLargeRounded';\r\nimport TimelineRoundedIcon from '@material-ui/icons/TimelineRounded';\r\n\r\nconst IconName = {\r\n    AirlineSeatReclineExtraIcon,\r\n    KeyboardArrowLeft,\r\n    KeyboardArrowRight,\r\n    ThumbUpIcon,\r\n    PanToolIcon,\r\n    DonutLargeRoundedIcon,\r\n    TimelineRoundedIcon\r\n}\r\n\r\nexport default IconName;","import { List, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Icon from \"../components/Icon\";\r\nimport IconName from \"./icon-enum\";\r\n\r\ninterface IClientMessage {\r\n    label: any;\r\n    icon: any;\r\n}\r\nconst clientMessages: Array<IClientMessage>= [\r\n    {\r\n      label: <Typography variant=\"body1\">Hey there! Lets begin by teaching you how to play this game on your own!</Typography>,\r\n      icon: <Icon item={IconName.PanToolIcon} fontSize=\"large\" />\r\n    },\r\n    {\r\n      label: <Typography variant=\"body1\">You'll only get to read all this once... So pay attention! It's really simple.</Typography>,\r\n      icon: <Icon item={IconName.DonutLargeRoundedIcon} fontSize=\"large\"/>\r\n    },\r\n    {\r\n      label: <Typography variant=\"body1\">You'll see the following words on screen<List>'Ready', 'Steady', 'Bang!'</List></Typography>,\r\n      icon: <Icon item={IconName.AirlineSeatReclineExtraIcon} fontSize=\"large\"/>\r\n    },\r\n    {\r\n      label: <Typography variant=\"body1\">'Ready', 'Steady' will appear at a fixed interval of 2 seconds. 'Bang!' however, will come after a random interval of time. Tap on the screen as soon as you see 'Bang!'</Typography>,\r\n      icon: <Icon item={IconName.TimelineRoundedIcon} fontSize=\"large\"/>\r\n    },\r\n    {\r\n      label: <Typography variant=\"body1\">Have fun playing and smash that screen of yours! All the best!</Typography>,\r\n      icon: <Icon item={IconName.ThumbUpIcon} fontSize=\"large\"/>\r\n    }\r\n];\r\n\r\nexport default clientMessages;","export function showClientMessage() {\r\n    const clientInfoShown1P = getClientInfo();\r\n    if(!clientInfoShown1P.value) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function setClientInfo() {\r\n    localStorage.setItem(\"clientInfoShown1P\", JSON.stringify({value: true}));\r\n}\r\n\r\nexport function getClientInfo() {\r\n    const clientInfo = JSON.parse(localStorage.getItem(\"clientInfoShown1P\") || \"{}\");\r\n    return clientInfo;\r\n}","\r\nimport React from \"react\";\r\nimport { Box, Button, Link, MobileStepper, Typography, useTheme } from \"@material-ui/core\";\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport clientMessages from \"../utils/clientMessages\";\r\nimport styled from 'styled-components';\r\nimport Icon from \"./Icon\";\r\nimport IconName from \"../utils/icon-enum\";\r\nimport { setClientInfo } from '../services/client'\r\n\r\nconst StyledSwipeableViews = styled(SwipeableViews)`\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst StyledMobileStepper = styled(MobileStepper)`\r\nwidth:100%;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\ntext-decoration: none;\r\ncolor: black;\r\n`;\r\n\r\nfunction ClientMessage(props: any) {\r\n    \r\n    const theme = useTheme();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const maxSteps = clientMessages.length;\r\n  \r\n    const handleNext = () => {\r\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n  \r\n    const handleBack = () => {\r\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleBegin = () => {\r\n        setClientInfo();\r\n        props.history.go(0);\r\n    }\r\n  \r\n    const handleStepChange = (step: number) => {\r\n      setActiveStep(step);\r\n    };\r\n  \r\n    return (\r\n      <Box height={1} display=\"flex\" flexDirection=\"column\" justifyContent=\"space-around\" alignItems=\"center\">\r\n        <Box height=\"100%\" px={2}>\r\n          <StyledSwipeableViews\r\n              axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n              index={activeStep}\r\n              onChangeIndex={handleStepChange}\r\n              enableMouseEvents\r\n          >\r\n              {clientMessages.map((step, index) => (\r\n              <Box textAlign=\"center\" height=\"60%\" display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-end\" alignItems=\"center\">\r\n                <Box pb={4} display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-end\" alignItems=\"center\">\r\n                    {step.label}\r\n                </Box>\r\n                {activeStep !== maxSteps - 1 && <Box pt={4}>\r\n                    {step.icon}\r\n                </Box>}\r\n                {activeStep === maxSteps - 1 && <Box pt={4} onClick={handleBegin}><StyledLink><Typography variant=\"h6\">{\"< Start Playing >\"}</Typography></StyledLink></Box>}\r\n              </Box>\r\n              ))}\r\n          </StyledSwipeableViews>\r\n        </Box>\r\n        <StyledMobileStepper\r\n          steps={maxSteps}\r\n          position=\"bottom\"\r\n          variant=\"progress\"\r\n          activeStep={activeStep}\r\n          nextButton={\r\n            <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps-1}>\r\n              {theme.direction === 'rtl' ? <Icon item={IconName.KeyboardArrowLeft} /> : <Icon item={IconName.KeyboardArrowRight} />}\r\n            </Button>\r\n          }\r\n          backButton={\r\n            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n              {theme.direction === 'rtl' ? <Icon item={IconName.KeyboardArrowRight} /> : <Icon item={IconName.KeyboardArrowLeft} />}\r\n            </Button>\r\n          }\r\n        />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  export default ClientMessage;","import { Box, Typography } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\ninterface IReadySteadyBang {\r\n    timer?: number;\r\n    bgcolor?: string;\r\n    randomTimerLimit?: number;\r\n    setIsClickScoreable: any;\r\n}\r\n\r\nfunction ReadySteadyBang(props: IReadySteadyBang) {\r\n    const [state, setState] = useState<\"Ready\" | \"Steady\" | \"Bang!\">(\"Ready\");\r\n    const defaultTimer = props.timer || 2000;\r\n    const randomTimerLimit = 200 + Math.random()*((props.randomTimerLimit || 5000) - 200);\r\n    const setIsClickScoreable = props.setIsClickScoreable;\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setState(\"Steady\");\r\n        }, defaultTimer);\r\n    }, [defaultTimer]);\r\n\r\n    useEffect(() => {\r\n        let timer: number;\r\n        if(state === \"Steady\") {\r\n            timer = setTimeout(() => {\r\n                setIsClickScoreable(true);\r\n                setState(\"Bang!\");\r\n            }, randomTimerLimit)\r\n        }\r\n        return function() {\r\n            timer && clearTimeout(timer);\r\n        }\r\n    }, [state, randomTimerLimit, setIsClickScoreable]);\r\n\r\n    return (\r\n        <Box minHeight={8} bgcolor={props.bgcolor} height={1} width={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography variant={state === \"Bang!\" ? \"h3\" : \"h6\"}>{state}</Typography>\r\n        </Box>\r\n    )\r\n\r\n}\r\n\r\nexport default ReadySteadyBang;","export function getAvgTime(numArray: Array<number>) {\r\n    const sum = numArray.reduce((aggregator, currentValue) => aggregator + currentValue);\r\n    return sum / numArray.length;\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Box from '@material-ui/core/Box';\r\nimport ClientMessage from \"./ClientMessage\";\r\nimport { Typography, useTheme } from \"@material-ui/core\";\r\nimport ReadySteadyBang from \"./ReadySteadyBang\";\r\nimport { showClientMessage } from \"../services/client\";\r\nimport { getAvgTime } from \"../services/calcs\";\r\nimport StyledButton from \"./StyledButton\";\r\n\r\ninterface ISinglePlayerProps {\r\n    [x:string]: any;\r\n}\r\n\r\nfunction SinglePlayer (props: ISinglePlayerProps) {\r\n\r\n    return (\r\n        showClientMessage() ? (\r\n            <ClientMessage {...props}/>) \r\n            : \r\n            <SinglePlayerGame {...props}/>\r\n    )\r\n}\r\n\r\nfunction SinglePlayerGame(props: ISinglePlayerProps) {\r\n    const theme = useTheme();\r\n    const [isClickScoreable, setIsClickScoreable] = useState<boolean>(false);\r\n    const [timer, setTimer] = useState<number>(0);\r\n    const [reactionTime, setReactionTime] = useState<number>(0);\r\n    const [illegalMove, setIllegalMove] = useState<boolean>(false);\r\n    const [reactionTimes, setReactionTimes] = useState<Array<number>>([]);\r\n    const [gameOver, setGameOver] = useState<boolean>(false);\r\n    const attemptsLimit = 5;\r\n\r\n    const handleClick = () => {\r\n        if(!gameOver) {\r\n            if(isClickScoreable && !illegalMove) {\r\n                const rTime = Date.now() - timer;\r\n                setReactionTime(rTime);\r\n                setIsClickScoreable(false);\r\n            } else {\r\n                setIllegalMove(!illegalMove);\r\n                setReactionTime(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isClickScoreable) {\r\n            setTimer(Date.now());\r\n        }\r\n    }, [isClickScoreable]);\r\n\r\n    useEffect(() => {\r\n        if(reactionTime !== 0) {\r\n            setReactionTimes((reactionTimes) => [...reactionTimes, reactionTime]);\r\n        }\r\n        if(reactionTimes.length === attemptsLimit) {\r\n            setGameOver(true);\r\n        }\r\n    }, [reactionTime]);\r\n\r\n    return (\r\n    <Box height={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" onClick={handleClick}>\r\n        {!gameOver && <Box width={1} height=\"10%\" textAlign=\"center\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" minHeight={8}>\r\n            {reactionTime === 0 && !illegalMove && <ReadySteadyBang bgcolor={theme.palette.grey[200]} setIsClickScoreable={setIsClickScoreable}/>}\r\n            {reactionTime !== 0 && !isClickScoreable && <Typography variant=\"subtitle1\">{reactionTime} ms</Typography>}\r\n        </Box>}\r\n        {gameOver && <Box width={1} textAlign=\"center\">\r\n            <Typography variant=\"subtitle1\">Your average reaction time was {getAvgTime(reactionTimes)} ms</Typography>\r\n            <Box pt={1} pb={3}>\r\n                <Typography variant=\"h6\">{getAvgTime(reactionTimes) > 300 ? \"You can do better!\" : \"Well Done!\"}</Typography>\r\n            </Box>\r\n            <StyledButton variant=\"contained\"\r\n            disableRipple \r\n            color=\"secondary\"\r\n            onClick={() => props.history.go(0)}\r\n            >\r\n                <Typography variant=\"h6\">Try Again</Typography>\r\n            </StyledButton>\r\n        </Box>}\r\n    </Box>\r\n    )\r\n}\r\n\r\nexport default SinglePlayer;","import React from \"react\";\r\nimport Box from '@material-ui/core/Box';\r\nimport { Typography } from \"@material-ui/core\";\r\nimport StyledButton from \"./StyledButton\";\r\n\r\ninterface ITwoPlayerProps {\r\n    [x:string]: any;\r\n}\r\n\r\nfunction TwoPlayer (props: ITwoPlayerProps) {\r\n\r\n\r\n    return (\r\n        <Box height={1} display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n            <Typography variant=\"h4\">Coming Soon...</Typography>\r\n            <Box py={1} />\r\n            <StyledButton \r\n            variant=\"contained\"\r\n            color=\"secondary\" onClick={() => props.history.goBack()}>\r\n                <Typography variant=\"h6\">Go Back</Typography>\r\n            </StyledButton>\r\n        </Box>\r\n    )\r\n} \r\n\r\nexport default TwoPlayer;","import React from 'react';import {\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport SinglePlayer from './components/SinglePlayer';\nimport TwoPlayer from './components/TwoPlayer';\n\nfunction App() {\n  return (\n    <>\n    <Switch>\n      <Route exact path=\"/\" component={Home}/>\n      <Route path=\"/1P\" component={SinglePlayer}/>\n      <Route path=\"/2P\" component={TwoPlayer}/>\n    </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}